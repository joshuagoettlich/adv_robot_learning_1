#!/usr/bin/env python3

# Standard Library Imports
import json

# ROS-related Imports
import rospy
from std_msgs.msg import String, Char

# --- Constants and Configuration ---

# The number of disks in the puzzle.
N_DISKS = 3

# Defines the names of the pegs. This order is used for reference.
PEGS = ['A', 'B', 'C']


class HanoiStateBasedSolverNode:
    """
    A ROS node that uses a classic recursive algorithm to determine the next
    optimal move in the Tower of Hanoi puzzle based on the current game state.
    """
    def __init__(self):
        """Initializes the ROS node, subscribers, and publishers."""
        rospy.init_node('hanoi_state_based_solver_node', anonymous=True)

        # This variable will store the most recent game state received.
        self.last_game_state_json = None

        # Subscriber to continuously update the game state from the environment.
        rospy.Subscriber('/hanoi/game_state', String, self.game_state_callback)
        
        # Subscriber that acts as a signal to trigger the move calculation.
        rospy.Subscriber('/hanoi/ask_llm', String, self.trigger_move_callback)
        
        # Publisher to send the calculated move command.
        self.move_publisher = rospy.Publisher('/hanoi/move', String, queue_size=10)
        
        # Publisher to signal that the game should be reset (e.g., due to an invalid state).
        self.reset_publisher = rospy.Publisher('/hanoi_reset', Char, queue_size=10)
        
        rospy.loginfo("State-Based Hanoi Solver Node initialized.")
        rospy.loginfo(f"Solving for {N_DISKS} disks based on current state.")
        rospy.loginfo("Subscribing to /hanoi/game_state for state updates.")
        rospy.loginfo("Subscribing to /hanoi/ask_llm to trigger moves.")
        rospy.loginfo("Publishing moves to /hanoi/move.")

    def game_state_callback(self, msg):
        """
        Stores the latest state of the game upon receiving it.

        Args:
            msg (std_msgs.msg.String): The message containing the game state as a JSON string.
        """
        rospy.loginfo("Received new game state from /hanoi/game_state.")
        self.last_game_state_json = msg.data

    def trigger_move_callback(self, msg):
        """
        Triggered by a message, this function analyzes the current game state,
        calculates the single best next move, and publishes it.

        Args:
            msg (std_msgs.msg.String): The trigger message (content is not used).
        """
        rospy.loginfo("--- Received Signal to Calculate Next Move ---")
        
        if self.last_game_state_json is None:
            rospy.logwarn("Trigger received, but no game state has been received yet. Ignoring.")
            return

        try:
            state_dict = json.loads(self.last_game_state_json)
        except json.JSONDecodeError:
            rospy.logerr(f"Failed to decode the last stored JSON state: {self.last_game_state_json}")
            return

        # --- 1. State Validation and Puzzle Completion Check ---
        is_valid, error_message = self.validate_state(state_dict)
        if not is_valid:
            rospy.logwarn(f"Invalid State Detected: {error_message}")
            rospy.loginfo("Publishing to /hanoi_reset due to invalid state.")
            self.reset_publisher.publish(Char(data=ord('1')))
            return

        if len(state_dict.get('C', [])) == N_DISKS:
            rospy.loginfo(f"Puzzle Solved! All {N_DISKS} disks are on Peg C.")
            return

        # --- 2. Calculate Move using Recursive Algorithm ---
        rospy.loginfo("Calculating best move using recursive algorithm...")
        # The main goal is always to move N_DISKS from 'A' (source) to 'C' (destination).
        move = self.calculate_next_move(N_DISKS, 'A', 'C', 'B', state_dict)

        if move is None:
            rospy.logwarn("Move calculation resulted in no action. The puzzle may be in an unrecoverable or solved state.")
            return
        
        source_peg, dest_peg = move
        rospy.loginfo(f"State-based calculation: Best move is from {source_peg} to {dest_peg}")
        
        # --- 3. Publish Move ---
        move_command = {"source_peg": source_peg, "destination_peg": dest_peg}
        move_json_string = json.dumps(move_command)

        rospy.sleep(0.1)  # Small delay to ensure the message is processed correctly
        self.move_publisher.publish(move_json_string)
        rospy.loginfo(f"Published move to /hanoi/move: {move_json_string}")
        rospy.loginfo("-------------------------------------------")

    def calculate_next_move(self, h, source, dest, aux, state):
        """
        Recursively determines the single best move to make, based on the goal of
        moving a tower of height 'h' from a source to a destination peg.

        Args:
            h (int): The height of the tower for the current sub-problem.
            source (str): The conceptual source peg for this sub-problem.
            dest (str): The conceptual destination peg for this sub-problem.
            aux (str): The conceptual auxiliary peg for this sub-problem.
            state (dict): The current state of all disks on all pegs.

        Returns:
            tuple or None: A (source_peg, destination_peg) tuple for the move, or None if
                           the sub-problem is already solved.
        """
        if h <= 0:
            return None

        # Find the actual current location of the largest disk in this sub-problem.
        peg_of_h = [peg for peg, disks in state.items() if h in disks][0]
        
        # If the largest disk 'h' is not on its conceptual source peg, it means we
        # are in the "second half" of the solution: moving the h-1 tower from the
        # auxiliary peg to the destination peg.
        if peg_of_h != source:
            return self.calculate_next_move(h - 1, aux, dest, source, state)
        # If disk 'h' is on the source peg, we check if the h-1 tower is ready.
        else:
            # Check if all smaller disks (the h-1 tower) are on the auxiliary peg.
            is_h_minus_1_tower_ready = all(disk in state.get(aux, []) for disk in range(1, h))
            
            # If the smaller tower is ready, the correct move is to move disk 'h'.
            if is_h_minus_1_tower_ready:
                return (source, dest)
            # Otherwise, we must continue working on moving the h-1 tower to the aux peg.
            else:
                return self.calculate_next_move(h - 1, source, aux, dest, state)

    def validate_state(self, state_dict):
        """
        Checks if the current state is valid according to Hanoi rules.
        A larger disk cannot be on top of a smaller disk.

        Args:
            state_dict (dict): The state, e.g., {'A': [3, 2, 1], 'B': [], 'C': []}
                               The lists must represent disks from bottom to top.
        Returns:
            (bool, str): A tuple of (is_valid, error_message).
        """
        for peg, disks in state_dict.items():
            for i in range(len(disks) - 1):
                # If a disk at a lower position (e.g., index 0) is smaller than
                # the disk above it (e.g., index 1), the state is invalid.
                if disks[i] < disks[i+1]:
                    error = f"Invalid state on Peg {peg}: disk {disks[i+1]} cannot be on disk {disks[i]}."
                    return False, error
        return True, ""


if __name__ == '__main__':
    try:
        HanoiStateBasedSolverNode()
        rospy.spin()  # Keeps the node alive until shutdown.
    except rospy.ROSInterruptException:
        pass
    except Exception as e:
        rospy.logfatal(f"An unhandled exception occurred: {e}")