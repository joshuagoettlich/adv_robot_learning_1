<?xml version="1.0" ?>
<launch>
  <arg name="sim" default="false"/>
  <arg name="usb_port" default="/dev/ttyUSB0" />
  <arg name="use_rs" default="false" />

  <arg name="pipeline" default="ompl" />
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="info" default="false"/>
  <arg name="debug" default="false" />
  
  <arg if="$(arg debug)" name="launch_prefix" value="gdb -ex run --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <include file="$(find open_manipulator_6dof_moveit)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <group if="$(arg sim)">
    <rosparam file="$(find om_position_controller)/config/gazebo_controllers.yaml" command="load" />
  </group>

  <group unless="$(arg sim)">
    <rosparam file="$(find om_position_controller)/config/position_controller.yaml" command="load"/>
  </group>

  <group unless="$(arg sim)">
    <include file="$(find open_manipulator_hw)/launch/open_manipulator_control.launch">
      <arg name="usb_port" value="$(arg usb_port)"/>
      <arg name="interface" value="position"/>
    </include>
  </group>

  <group if="$(arg sim)">
    <include file="$(find open_manipulator_hw)/launch/open_manipulator_gazebo.launch"/>
  </group>

  <include file="$(find open_manipulator_hw)/launch/controller_utils.launch"/>

  <group if="$(arg sim)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <rosparam param="source_list">[/open_manipulator_6dof/joint_states]</rosparam>
    </node>
  </group>
  
  <group if="$(arg sim)">
    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" 
          output="screen" ns="open_manipulator_6dof" args="joint_state_controller arm_controller gripper_controller"/>
  </group>

  <group unless="$(arg sim)">
    <node name="arm_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" 
          output="screen" args="position_controller"/>
  </group>

  <group unless="$(arg sim)">
    <group if="$(arg use_rs)">
      <include file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="enable_pointcloud" value="false" />
        <arg name="align_depth" value="true" />
      </include>

      <node pkg="tf" type="static_transform_publisher" name="camera_frame_to_realsense_frame"
            args="-0.070 0 0.052 0 0 0 link7 camera_link 10" />

      <node pkg="tf" type="static_transform_publisher" name="camera_color_frame_publisher"
            args="0 0 0 -1.57 0 0 camera_color_frame camera_color_frame_calib 10" />
    </group>
  </group>

  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen">
    <remap from="joint_states" to="/joint_states"/>
    
    <param name="planning_pipeline" value="$(arg pipeline)" />
    
    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="1"/>

    <param name="fake_execution_type" if="$(arg fake_execution)" value="interpolate" />
    
    <param name="planning_scene_monitor/publish_planning_scene" value="true" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="true" />
    <param name="planning_scene_monitor/publish_state_updates" value="true" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="true" />
  </node>

  
  
</launch>